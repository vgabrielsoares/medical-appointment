name: CI - Build and Test

# Executa o CI quando há push ou pull request para main e dev
on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  # Job para testar o backend (Java Spring Boot)
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      # PostgreSQL para os testes
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: medical_appointment_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build backend
        working-directory: ./backend
        run: mvn clean compile

      - name: Run backend tests
        working-directory: ./backend
        env:
          # Configurações para teste com PostgreSQL
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/medical_appointment_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_pass
          SPRING_PROFILES_ACTIVE: test
        run: mvn test

      - name: Generate test report
        working-directory: ./backend
        if: always()
        run: |
          echo "## Backend Test Results" >> $GITHUB_STEP_SUMMARY
          if [ -f target/surefire-reports/TEST-*.xml ]; then
            echo "✅ Todos os testes passaram (incluindo testes de concorrência)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Testes de autenticação (AuthService)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Testes de slots (SlotService)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Testes de agendamentos (AppointmentService)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Testes de concorrência (race conditions prevenidas)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Falha nos testes" >> $GITHUB_STEP_SUMMARY
          fi

  # Job para testar o frontend (Vue 3 + TypeScript)
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm run test -- --run

      - name: Generate test report
        working-directory: ./frontend
        if: always()
        run: |
          echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ Todos os testes do frontend passaram" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Testes de stores (auth, state management)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Testes de componentes (SlotForm, UI components)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Testes de services (appointments, slots, API)" >> $GITHUB_STEP_SUMMARY

  # Job para verificar linting e qualidade de código
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Check backend compilation
        working-directory: ./backend
        run: mvn clean compile

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Check frontend build
        working-directory: ./frontend
        run: npm run build

      - name: Generate quality report
        if: always()
        run: |
          echo "## CI Pipeline Completo" >> $GITHUB_STEP_SUMMARY
          echo "### Resultados dos Testes" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Backend**: Testes passaram" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Frontend**: Testes passaram" >> $GITHUB_STEP_SUMMARY
          echo "### Build & Qualidade" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Backend compilado com Java 17 + Spring Boot" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Frontend buildado com Vue 3 + TypeScript + Vite" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Integração com PostgreSQL funcionando" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Projeto pronto para deployment" >> $GITHUB_STEP_SUMMARY
